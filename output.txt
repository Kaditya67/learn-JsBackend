CONST EXPRESS = REQUIRE('EXPRESS');
CONST APP = EXPRESS();

APP.USE(EXPRESS.JSON());

LET USERS = [
    { ID: 400, NAME: 'ADITYA' },
    { ID: 500, ISSUPER: TRUE, NAME: 'ADMIN' }
];

// GET: ROUTE TO GET ALL USERS
APP.GET('/API/USERS', (REQ, RES) => {
    RES.JSON(USERS);
});

// GET: ROUTE TO GET A SPECIFIC USER BY ID
APP.GET('/API/USERS/:ID', (REQ, RES) => {
    CONST USERID = PARSEINT(REQ.PARAMS.ID);
    CONST USER = USERS.FIND(U => U.ID === USERID);
    IF (!USER) {
        RETURN RES.STATUS(404).JSON({ ERROR: 'USER NOT FOUND' });
    }
    RES.JSON(USER);
});

// POST: ROUTE TO CREATE A NEW USER
APP.POST('/API/USERS', (REQ, RES) => {
    CONST { ID, NAME, ISSUPER } = REQ.BODY;
    CONST NEWUSER = { ID, NAME, ISSUPER };
    CONSOLE.LOG(NEWUSER);
    USERS.PUSH(NEWUSER);
    RES.STATUS(201).JSON(NEWUSER);
});

// PUT: ROUTE TO UPDATE AN EXISTING USER'S DETAILS
APP.PUT('/API/USERS/:ID', (REQ, RES) => {
    CONST USERID = PARSEINT(REQ.PARAMS.ID);
    LET USER = USERS.FIND(U => U.ID === USERID);
    IF (!USER) {
        RETURN RES.STATUS(404).JSON({ ERROR: 'USER NOT FOUND' });
    }
    CONST { NAME, ISSUPER } = REQ.BODY;
    USER.NAME = NAME || USER.NAME;
    USER.ISSUPER = ISSUPER !== UNDEFINED ? ISSUPER : USER.ISSUPER;
    RES.JSON(USER);
});

// DELETE: ROUTE TO DELETE A USER
APP.DELETE('/API/USERS/:ID', (REQ, RES) => {
    CONST USERID = PARSEINT(REQ.PARAMS.ID);
    USERS = USERS.FILTER(U => U.ID !== USERID);
    RES.STATUS(204).SEND();  // NO CONTENT RESPONSE
});

// ROUTE WITH QUERY PARAMETER FOR SEARCH
APP.GET('/SEARCH', (REQ, RES) => {
    CONST NAME = REQ.QUERY.NAME;
    RES.SEND(`YOUR NAME IS ${NAME}`);
    // RES.JSON(NAME);
});

// POST: ROUTE FOR USER TO INPUT THEIR NAME AND AGE
APP.POST('/USER', (REQ, RES) => {
    CONST { NAME, AGE } = REQ.BODY;
    IF (!NAME || !AGE) {
        RETURN RES.STATUS(400).JSON({ ERROR: 'NAME AND AGE ARE REQUIRED' });
    }
    RES.SEND(`YOUR NAME IS ${NAME} AND YOUR AGE IS ${AGE}`);
});

APP.LISTEN(3000, () => {
    CONSOLE.LOG("SERVER STARTED, GO TO /API/USERS OR OTHER ROUTES!");
});
